[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "RTLowLevelClient",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "SessionUpdateMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "ServerVAD",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "SessionUpdateParams",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "ItemCreateMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "FunctionCallOutputItem",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "ResponseCreateMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "InputAudioBufferAppendMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "InputAudioTranscription",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "AzureKeyCredential",
        "importPath": "azure.core.credentials",
        "description": "azure.core.credentials",
        "isExtraImport": true,
        "detail": "azure.core.credentials",
        "documentation": {}
    },
    {
        "label": "RTToolCall",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "ToolResultDirection",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "Quart",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "websocket",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "EventGridEvent",
        "importPath": "azure.eventgrid",
        "description": "azure.eventgrid",
        "isExtraImport": true,
        "detail": "azure.eventgrid",
        "documentation": {}
    },
    {
        "label": "SystemEventNames",
        "importPath": "azure.eventgrid",
        "description": "azure.eventgrid",
        "isExtraImport": true,
        "detail": "azure.eventgrid",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlunparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "info",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "MediaStreamingOptions",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "AudioFormat",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "MediaStreamingTransportType",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "MediaStreamingContentType",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "MediaStreamingAudioChannelType",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "CallAutomationClient",
        "importPath": "azure.communication.callautomation.aio",
        "description": "azure.communication.callautomation.aio",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation.aio",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "CloudEvent",
        "importPath": "azure.core.messaging",
        "description": "azure.core.messaging",
        "isExtraImport": true,
        "detail": "azure.core.messaging",
        "documentation": {}
    },
    {
        "label": "init_websocket",
        "importPath": "azureOpenAIService",
        "description": "azureOpenAIService",
        "isExtraImport": true,
        "detail": "azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "start_conversation",
        "importPath": "azureOpenAIService",
        "description": "azureOpenAIService",
        "isExtraImport": true,
        "detail": "azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "send_audio_to_external_ai",
        "importPath": "azureOpenAIService",
        "description": "azureOpenAIService",
        "isExtraImport": true,
        "detail": "azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "process_websocket_message_async",
        "importPath": "mediaStreamingHandler",
        "description": "mediaStreamingHandler",
        "isExtraImport": true,
        "detail": "mediaStreamingHandler",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "TTFont",
        "importPath": "fontTools.ttLib",
        "description": "fontTools.ttLib",
        "isExtraImport": true,
        "detail": "fontTools.ttLib",
        "documentation": {}
    },
    {
        "label": "sfnt",
        "importPath": "fontTools.ttLib",
        "description": "fontTools.ttLib",
        "isExtraImport": true,
        "detail": "fontTools.ttLib",
        "documentation": {}
    },
    {
        "label": "TTFont",
        "importPath": "fontTools.ttLib",
        "description": "fontTools.ttLib",
        "isExtraImport": true,
        "detail": "fontTools.ttLib",
        "documentation": {}
    },
    {
        "label": "timestampNow",
        "importPath": "fontTools.misc.timeTools",
        "description": "fontTools.misc.timeTools",
        "isExtraImport": true,
        "detail": "fontTools.misc.timeTools",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "parse_tfm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "parse_tfm",
        "description": "parse_tfm",
        "detail": "parse_tfm",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "active_websocket",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "active_websocket = None\nanswer_prompt_system_template = open(\"agent-instructions.txt\", \"r\").read()\nAZURE_OPENAI_SERVICE_ENDPOINT = os.getenv(\"AZURE_OPENAI_REALTIME_ENDPOINT\")\nAZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "answer_prompt_system_template",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "answer_prompt_system_template = open(\"agent-instructions.txt\", \"r\").read()\nAZURE_OPENAI_SERVICE_ENDPOINT = os.getenv(\"AZURE_OPENAI_REALTIME_ENDPOINT\")\nAZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "AZURE_OPENAI_SERVICE_ENDPOINT",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "AZURE_OPENAI_SERVICE_ENDPOINT = os.getenv(\"AZURE_OPENAI_REALTIME_ENDPOINT\")\nAZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "AZURE_OPENAI_SERVICE_KEY",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "AZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(\n        url=AZURE_OPENAI_SERVICE_ENDPOINT,",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "AZURE_OPENAI_DEPLOYMENT_MODEL_NAME",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "AZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(\n        url=AZURE_OPENAI_SERVICE_ENDPOINT,\n        key_credential=AzureKeyCredential(AZURE_OPENAI_SERVICE_KEY),",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "_tools_pending",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(\n        url=AZURE_OPENAI_SERVICE_ENDPOINT,\n        key_credential=AzureKeyCredential(AZURE_OPENAI_SERVICE_KEY),\n        azure_deployment=AZURE_OPENAI_DEPLOYMENT_MODEL_NAME,\n    )\n    await client.connect()\n    await client.send(",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def home():\n    return \"Hello ACS CallAutomation!\"\nif __name__ == \"__main__\":\n    app.logger.setLevel(INFO)\n    app.run(port=55305)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "ACS_CONNECTION_STRING",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "ACS_CONNECTION_STRING = os.getenv(\"ACS_CONNECTION_STRING\")\n# Callback events URI to handle callback events.\nCALLBACK_URI_HOST = os.getenv(\"CALLBACK_URI_HOST\")\nCALLBACK_EVENTS_URI = CALLBACK_URI_HOST + \"/api/callbacks\"\nacs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "CALLBACK_URI_HOST",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "CALLBACK_URI_HOST = os.getenv(\"CALLBACK_URI_HOST\")\nCALLBACK_EVENTS_URI = CALLBACK_URI_HOST + \"/api/callbacks\"\nacs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "CALLBACK_EVENTS_URI",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "CALLBACK_EVENTS_URI = CALLBACK_URI_HOST + \"/api/callbacks\"\nacs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)\n        if (",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "acs_client",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "acs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)\n        if (\n            event.event_type",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)\n        if (\n            event.event_type\n            == SystemEventNames.EventGridSubscriptionValidationEventName",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "ToolResultDirection",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class ToolResultDirection(Enum):\n    TO_SERVER = 1\n    TO_CLIENT = 2\nclass ToolResult:\n    text: str\n    destination: ToolResultDirection\n    def __init__(self, text: str, destination: ToolResultDirection):\n        self.text = text\n        self.destination = destination\n    def to_text(self) -> str:",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "ToolResult",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class ToolResult:\n    text: str\n    destination: ToolResultDirection\n    def __init__(self, text: str, destination: ToolResultDirection):\n        self.text = text\n        self.destination = destination\n    def to_text(self) -> str:\n        if self.text is None:\n            return \"\"\n        return self.text if isinstance(self.text, str) else json.dumps(self.text)",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "RTToolCall",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class RTToolCall:\n    tool_call_id: str\n    previous_id: str\n    def __init__(self, tool_call_id: str, previous_id: str):\n        self.tool_call_id = tool_call_id\n        self.previous_id = previous_id\nclass Tool:\n    target: Callable[..., ToolResult]\n    schema: Any\n    def __init__(self, target: Any, schema: Any):",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class Tool:\n    target: Callable[..., ToolResult]\n    schema: Any\n    def __init__(self, target: Any, schema: Any):\n        self.target = target\n        self.schema = schema\n_save_customer_issue_tool_schema = {\n    \"name\": \"save_customer_issue\",\n    \"type\": \"function\",\n    \"description\": \"Saves a customer issue to the database\",",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "kind": 2,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "def get_tools() -> dict[str, Tool]:\n    return {\n        # \"get_current_weather\": Tool(\n        #     schema=_weather_current_tool_schema,\n        #     target=lambda args: _weather_tool(\"current\", args),\n        # ),\n        # \"get_weather_forecast\": Tool(\n        #     schema=_weather_forecast_tool_schema,\n        #     target=lambda args: _weather_tool(\"hourly\", args),\n        # ),",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "_save_customer_issue_tool_schema",
        "kind": 5,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "_save_customer_issue_tool_schema = {\n    \"name\": \"save_customer_issue\",\n    \"type\": \"function\",\n    \"description\": \"Saves a customer issue to the database\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"customer_name\": {\n                \"type\": \"string\",\n                \"description\": \"The name of the customer\",",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "sfnt.USE_ZOPFLI",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "sfnt.USE_ZOPFLI = True\nif len(sys.argv) < 2:\n    print(\"Usage: %s <font file>\" % sys.argv[0])\n    sys.exit(1)\nfont_file = sys.argv[1]\nfont_name = os.path.splitext(os.path.basename(font_file))[0]\nfont = TTFont(font_file, recalcBBoxes=False, recalcTimestamp=False)\n# fix timestamp to the epoch\nfont['head'].created = 0\nfont['head'].modified = 0",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font_file",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font_file = sys.argv[1]\nfont_name = os.path.splitext(os.path.basename(font_file))[0]\nfont = TTFont(font_file, recalcBBoxes=False, recalcTimestamp=False)\n# fix timestamp to the epoch\nfont['head'].created = 0\nfont['head'].modified = 0\n# remove fontforge timestamps\nif 'FFTM' in font:\n    del font['FFTM']\n# remove redundant GDEF table",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font_name",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font_name = os.path.splitext(os.path.basename(font_file))[0]\nfont = TTFont(font_file, recalcBBoxes=False, recalcTimestamp=False)\n# fix timestamp to the epoch\nfont['head'].created = 0\nfont['head'].modified = 0\n# remove fontforge timestamps\nif 'FFTM' in font:\n    del font['FFTM']\n# remove redundant GDEF table\nif 'GDEF' in font:",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font = TTFont(font_file, recalcBBoxes=False, recalcTimestamp=False)\n# fix timestamp to the epoch\nfont['head'].created = 0\nfont['head'].modified = 0\n# remove fontforge timestamps\nif 'FFTM' in font:\n    del font['FFTM']\n# remove redundant GDEF table\nif 'GDEF' in font:\n    del font['GDEF']",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['head'].created",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['head'].created = 0\nfont['head'].modified = 0\n# remove fontforge timestamps\nif 'FFTM' in font:\n    del font['FFTM']\n# remove redundant GDEF table\nif 'GDEF' in font:\n    del font['GDEF']\n# remove Macintosh table\n# https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['head'].modified",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['head'].modified = 0\n# remove fontforge timestamps\nif 'FFTM' in font:\n    del font['FFTM']\n# remove redundant GDEF table\nif 'GDEF' in font:\n    del font['GDEF']\n# remove Macintosh table\n# https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html\nfont['name'].names = [record for record in font['name'].names if record.platformID != 1]",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['name'].names",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['name'].names = [record for record in font['name'].names if record.platformID != 1]\nfont['cmap'].tables = [table for table in font['cmap'].tables if table.platformID != 1]\n# fix OS/2 and hhea metrics\nglyf = font['glyf']\nascent = int(max(glyf[c].yMax for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMax\")))\ndescent = -int(min(glyf[c].yMin for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMin\")))\nfont['OS/2'].usWinAscent = ascent\nfont['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['cmap'].tables",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['cmap'].tables = [table for table in font['cmap'].tables if table.platformID != 1]\n# fix OS/2 and hhea metrics\nglyf = font['glyf']\nascent = int(max(glyf[c].yMax for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMax\")))\ndescent = -int(min(glyf[c].yMin for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMin\")))\nfont['OS/2'].usWinAscent = ascent\nfont['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "glyf",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "glyf = font['glyf']\nascent = int(max(glyf[c].yMax for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMax\")))\ndescent = -int(min(glyf[c].yMin for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMin\")))\nfont['OS/2'].usWinAscent = ascent\nfont['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "ascent",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "ascent = int(max(glyf[c].yMax for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMax\")))\ndescent = -int(min(glyf[c].yMin for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMin\")))\nfont['OS/2'].usWinAscent = ascent\nfont['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF\nfont.flavor = 'woff'",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "descent",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "descent = -int(min(glyf[c].yMin for c in font.getGlyphOrder() if hasattr(glyf[c], \"yMin\")))\nfont['OS/2'].usWinAscent = ascent\nfont['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF\nfont.flavor = 'woff'\nfont.save(os.path.join('woff', font_name + '.woff'), reorderTables=None)",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['OS/2'].usWinAscent",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['OS/2'].usWinAscent = ascent\nfont['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF\nfont.flavor = 'woff'\nfont.save(os.path.join('woff', font_name + '.woff'), reorderTables=None)\n# save WOFF2",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['OS/2'].usWinDescent",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['OS/2'].usWinDescent = descent\nfont['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF\nfont.flavor = 'woff'\nfont.save(os.path.join('woff', font_name + '.woff'), reorderTables=None)\n# save WOFF2\nfont.flavor = 'woff2'",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['hhea'].ascent",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['hhea'].ascent = ascent\nfont['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF\nfont.flavor = 'woff'\nfont.save(os.path.join('woff', font_name + '.woff'), reorderTables=None)\n# save WOFF2\nfont.flavor = 'woff2'\nfont.save(os.path.join('woff2', font_name + '.woff2'), reorderTables=None)",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font['hhea'].descent",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font['hhea'].descent = -descent\n# save TTF\nfont.save(font_file, reorderTables=None)\n# save WOFF\nfont.flavor = 'woff'\nfont.save(os.path.join('woff', font_name + '.woff'), reorderTables=None)\n# save WOFF2\nfont.flavor = 'woff2'\nfont.save(os.path.join('woff2', font_name + '.woff2'), reorderTables=None)",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font.flavor",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font.flavor = 'woff'\nfont.save(os.path.join('woff', font_name + '.woff'), reorderTables=None)\n# save WOFF2\nfont.flavor = 'woff2'\nfont.save(os.path.join('woff2', font_name + '.woff2'), reorderTables=None)",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "font.flavor",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "description": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "peekOfCode": "font.flavor = 'woff2'\nfont.save(os.path.join('woff2', font_name + '.woff2'), reorderTables=None)",
        "detail": "presentation.node_modules.katex.src.fonts.generate_fonts",
        "documentation": {}
    },
    {
        "label": "find_font_path",
        "kind": 2,
        "importPath": "presentation.node_modules.katex.src.metrics.extract_tfms",
        "description": "presentation.node_modules.katex.src.metrics.extract_tfms",
        "peekOfCode": "def find_font_path(font_name):\n    try:\n        font_path = subprocess.check_output(['kpsewhich', font_name])\n    except OSError:\n        raise RuntimeError(\"Couldn't find kpsewhich program, make sure you\" +\n                           \" have TeX installed\")\n    except subprocess.CalledProcessError:\n        raise RuntimeError(\"Couldn't find font metrics: '%s'\" % font_name)\n    return font_path.strip()\ndef main():",
        "detail": "presentation.node_modules.katex.src.metrics.extract_tfms",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "presentation.node_modules.katex.src.metrics.extract_tfms",
        "description": "presentation.node_modules.katex.src.metrics.extract_tfms",
        "peekOfCode": "def main():\n    mapping = json.load(sys.stdin)\n    fonts = [\n        'cmbsy10.tfm',\n        'cmbx10.tfm',\n        'cmbxti10.tfm',\n        'cmex10.tfm',\n        'cmmi10.tfm',\n        'cmmib10.tfm',\n        'cmr10.tfm',",
        "detail": "presentation.node_modules.katex.src.metrics.extract_tfms",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "presentation.node_modules.katex.src.metrics.extract_ttfs",
        "description": "presentation.node_modules.katex.src.metrics.extract_ttfs",
        "peekOfCode": "def main():\n    start_json = json.load(sys.stdin)\n    for font in start_json:\n        fontInfo = TTFont(\"../../fonts/KaTeX_\" + font + \".ttf\")\n        glyf = fontInfo[\"glyf\"]\n        widths = fontInfo.getGlyphSet()\n        unitsPerEm = float(fontInfo[\"head\"].unitsPerEm)\n        # We keep ALL Unicode cmaps, not just fontInfo[\"cmap\"].getcmap(3, 1).\n        # This is playing it extra safe, since it reports inconsistencies.\n        # Platform 0 is Unicode, platform 3 is Windows. For platform 3,",
        "detail": "presentation.node_modules.katex.src.metrics.extract_ttfs",
        "documentation": {}
    },
    {
        "label": "metrics_to_extract",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.metrics.extract_ttfs",
        "description": "presentation.node_modules.katex.src.metrics.extract_ttfs",
        "peekOfCode": "metrics_to_extract = {\n    # Font name\n    \"AMS-Regular\": {\n        u\"\\u21e2\": None,  # \\dashrightarrow\n        u\"\\u21e0\": None,  # \\dashleftarrow\n    },\n    \"Main-Regular\": {\n        # Skew and italic metrics can't be easily parsed from the TTF. Instead,\n        # we map each character to a \"base character\", which is a character\n        # from the same font with correct italic and skew metrics. A character",
        "detail": "presentation.node_modules.katex.src.metrics.extract_ttfs",
        "documentation": {}
    },
    {
        "label": "props",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.metrics.format_json",
        "description": "presentation.node_modules.katex.src.metrics.format_json",
        "peekOfCode": "props = ['depth', 'height', 'italic', 'skew']\nif len(sys.argv) > 1:\n    if sys.argv[1] == '--width':\n        props.append('width')\ndata = json.load(sys.stdin)\nsys.stdout.write(\n  \"// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.\\n\")\nsep = \"export default {\\n    \"\nfor font in sorted(data):\n    sys.stdout.write(sep + json.dumps(font))",
        "detail": "presentation.node_modules.katex.src.metrics.format_json",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.metrics.format_json",
        "description": "presentation.node_modules.katex.src.metrics.format_json",
        "peekOfCode": "data = json.load(sys.stdin)\nsys.stdout.write(\n  \"// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.\\n\")\nsep = \"export default {\\n    \"\nfor font in sorted(data):\n    sys.stdout.write(sep + json.dumps(font))\n    sep = \": {\\n        \"\n    for glyph in sorted(data[font], key=int):\n        sys.stdout.write(sep + json.dumps(glyph) + \": \")\n        values = [value if value != 0.0 else 0 for value in",
        "detail": "presentation.node_modules.katex.src.metrics.format_json",
        "documentation": {}
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "presentation.node_modules.katex.src.metrics.format_json",
        "description": "presentation.node_modules.katex.src.metrics.format_json",
        "peekOfCode": "sep = \"export default {\\n    \"\nfor font in sorted(data):\n    sys.stdout.write(sep + json.dumps(font))\n    sep = \": {\\n        \"\n    for glyph in sorted(data[font], key=int):\n        sys.stdout.write(sep + json.dumps(glyph) + \": \")\n        values = [value if value != 0.0 else 0 for value in\n                  [data[font][glyph][key] for key in props]]\n        sys.stdout.write(json.dumps(values))\n        sep = \",\\n        \"",
        "detail": "presentation.node_modules.katex.src.metrics.format_json",
        "documentation": {}
    },
    {
        "label": "CharInfoWord",
        "kind": 6,
        "importPath": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "description": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "peekOfCode": "class CharInfoWord(object):\n    def __init__(self, word):\n        b1, b2, b3, b4 = (word >> 24,\n                          (word & 0xff0000) >> 16,\n                          (word & 0xff00) >> 8,\n                          word & 0xff)\n        self.width_index = b1\n        self.height_index = b2 >> 4\n        self.depth_index = b2 & 0x0f\n        self.italic_index = (b3 & 0b11111100) >> 2",
        "detail": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "documentation": {}
    },
    {
        "label": "LigKernProgram",
        "kind": 6,
        "importPath": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "description": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "peekOfCode": "class LigKernProgram(object):\n    def __init__(self, program):\n        self.program = program\n    def execute(self, start, next_char):\n        curr_instruction = start\n        while True:\n            instruction = self.program[curr_instruction]\n            (skip, inst_next_char, op, remainder) = instruction\n            if inst_next_char == next_char:\n                if op < 128:",
        "detail": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "documentation": {}
    },
    {
        "label": "TfmCharMetrics",
        "kind": 6,
        "importPath": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "description": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "peekOfCode": "class TfmCharMetrics(object):\n    def __init__(self, width, height, depth, italic, kern_table):\n        self.width = width\n        self.height = height\n        self.depth = depth\n        self.italic_correction = italic\n        self.kern_table = kern_table\nclass TfmFile(object):\n    def __init__(self, start_char, end_char, char_info, width_table,\n                 height_table, depth_table, italic_table, ligkern_table,",
        "detail": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "documentation": {}
    },
    {
        "label": "TfmFile",
        "kind": 6,
        "importPath": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "description": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "peekOfCode": "class TfmFile(object):\n    def __init__(self, start_char, end_char, char_info, width_table,\n                 height_table, depth_table, italic_table, ligkern_table,\n                 kern_table):\n        self.start_char = start_char\n        self.end_char = end_char\n        self.char_info = char_info\n        self.width_table = width_table\n        self.height_table = height_table\n        self.depth_table = depth_table",
        "detail": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "documentation": {}
    },
    {
        "label": "TfmReader",
        "kind": 6,
        "importPath": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "description": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "peekOfCode": "class TfmReader(object):\n    def __init__(self, f):\n        self.f = f\n    def read_byte(self):\n        return ord(self.f.read(1))\n    def read_halfword(self):\n        b1 = self.read_byte()\n        b2 = self.read_byte()\n        return (b1 << 8) | b2\n    def read_word(self):",
        "detail": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "documentation": {}
    },
    {
        "label": "read_tfm_file",
        "kind": 2,
        "importPath": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "description": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "peekOfCode": "def read_tfm_file(file_name):\n    with open(file_name, 'rb') as f:\n        reader = TfmReader(f)\n        # file_size\n        reader.read_halfword()\n        header_size = reader.read_halfword()\n        start_char = reader.read_halfword()\n        end_char = reader.read_halfword()\n        width_table_size = reader.read_halfword()\n        height_table_size = reader.read_halfword()",
        "detail": "presentation.node_modules.katex.src.metrics.parse_tfm",
        "documentation": {}
    }
]