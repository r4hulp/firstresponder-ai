[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "RTLowLevelClient",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "SessionUpdateMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "ServerVAD",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "SessionUpdateParams",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "ItemCreateMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "FunctionCallOutputItem",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "ResponseCreateMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "InputAudioBufferAppendMessage",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "InputAudioTranscription",
        "importPath": "rtclient",
        "description": "rtclient",
        "isExtraImport": true,
        "detail": "rtclient",
        "documentation": {}
    },
    {
        "label": "AzureKeyCredential",
        "importPath": "azure.core.credentials",
        "description": "azure.core.credentials",
        "isExtraImport": true,
        "detail": "azure.core.credentials",
        "documentation": {}
    },
    {
        "label": "RTToolCall",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "ToolResultDirection",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "importPath": "tools",
        "description": "tools",
        "isExtraImport": true,
        "detail": "tools",
        "documentation": {}
    },
    {
        "label": "Quart",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "websocket",
        "importPath": "quart",
        "description": "quart",
        "isExtraImport": true,
        "detail": "quart",
        "documentation": {}
    },
    {
        "label": "EventGridEvent",
        "importPath": "azure.eventgrid",
        "description": "azure.eventgrid",
        "isExtraImport": true,
        "detail": "azure.eventgrid",
        "documentation": {}
    },
    {
        "label": "SystemEventNames",
        "importPath": "azure.eventgrid",
        "description": "azure.eventgrid",
        "isExtraImport": true,
        "detail": "azure.eventgrid",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlunparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "info",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "MediaStreamingOptions",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "AudioFormat",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "MediaStreamingTransportType",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "MediaStreamingContentType",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "MediaStreamingAudioChannelType",
        "importPath": "azure.communication.callautomation",
        "description": "azure.communication.callautomation",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation",
        "documentation": {}
    },
    {
        "label": "CallAutomationClient",
        "importPath": "azure.communication.callautomation.aio",
        "description": "azure.communication.callautomation.aio",
        "isExtraImport": true,
        "detail": "azure.communication.callautomation.aio",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "CloudEvent",
        "importPath": "azure.core.messaging",
        "description": "azure.core.messaging",
        "isExtraImport": true,
        "detail": "azure.core.messaging",
        "documentation": {}
    },
    {
        "label": "init_websocket",
        "importPath": "azureOpenAIService",
        "description": "azureOpenAIService",
        "isExtraImport": true,
        "detail": "azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "start_conversation",
        "importPath": "azureOpenAIService",
        "description": "azureOpenAIService",
        "isExtraImport": true,
        "detail": "azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "send_audio_to_external_ai",
        "importPath": "azureOpenAIService",
        "description": "azureOpenAIService",
        "isExtraImport": true,
        "detail": "azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "process_websocket_message_async",
        "importPath": "mediaStreamingHandler",
        "description": "mediaStreamingHandler",
        "isExtraImport": true,
        "detail": "mediaStreamingHandler",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "backend..venv.Scripts.activate_this",
        "description": "backend..venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "backend..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "active_websocket",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "active_websocket = None\nanswer_prompt_system_template = open(\"agent-instructions.txt\", \"r\").read()\nAZURE_OPENAI_SERVICE_ENDPOINT = os.getenv(\"AZURE_OPENAI_REALTIME_ENDPOINT\")\nAZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "answer_prompt_system_template",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "answer_prompt_system_template = open(\"agent-instructions.txt\", \"r\").read()\nAZURE_OPENAI_SERVICE_ENDPOINT = os.getenv(\"AZURE_OPENAI_REALTIME_ENDPOINT\")\nAZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "AZURE_OPENAI_SERVICE_ENDPOINT",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "AZURE_OPENAI_SERVICE_ENDPOINT = os.getenv(\"AZURE_OPENAI_REALTIME_ENDPOINT\")\nAZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "AZURE_OPENAI_SERVICE_KEY",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "AZURE_OPENAI_SERVICE_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(\n        url=AZURE_OPENAI_SERVICE_ENDPOINT,",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "AZURE_OPENAI_DEPLOYMENT_MODEL_NAME",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "AZURE_OPENAI_DEPLOYMENT_MODEL_NAME = os.getenv(\n    \"AZURE_OPENAI_REALTIME_DEPLOYMENT_MODEL_NAME\"\n)\ntools: dict[str, Tool] = get_tools()\n_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(\n        url=AZURE_OPENAI_SERVICE_ENDPOINT,\n        key_credential=AzureKeyCredential(AZURE_OPENAI_SERVICE_KEY),",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "_tools_pending",
        "kind": 5,
        "importPath": "backend.azureOpenAIService",
        "description": "backend.azureOpenAIService",
        "peekOfCode": "_tools_pending = {}\nasync def start_conversation():\n    global client\n    client = RTLowLevelClient(\n        url=AZURE_OPENAI_SERVICE_ENDPOINT,\n        key_credential=AzureKeyCredential(AZURE_OPENAI_SERVICE_KEY),\n        azure_deployment=AZURE_OPENAI_DEPLOYMENT_MODEL_NAME,\n    )\n    await client.connect()\n    await client.send(",
        "detail": "backend.azureOpenAIService",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def home():\n    return \"Hello ACS CallAutomation!\"\nif __name__ == \"__main__\":\n    app.logger.setLevel(INFO)\n    app.run(port=55305)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "ACS_CONNECTION_STRING",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "ACS_CONNECTION_STRING = os.getenv(\"ACS_CONNECTION_STRING\")\n# Callback events URI to handle callback events.\nCALLBACK_URI_HOST = os.getenv(\"CALLBACK_URI_HOST\")\nCALLBACK_EVENTS_URI = CALLBACK_URI_HOST + \"/api/callbacks\"\nacs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "CALLBACK_URI_HOST",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "CALLBACK_URI_HOST = os.getenv(\"CALLBACK_URI_HOST\")\nCALLBACK_EVENTS_URI = CALLBACK_URI_HOST + \"/api/callbacks\"\nacs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "CALLBACK_EVENTS_URI",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "CALLBACK_EVENTS_URI = CALLBACK_URI_HOST + \"/api/callbacks\"\nacs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)\n        if (",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "acs_client",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "acs_client = CallAutomationClient.from_connection_string(ACS_CONNECTION_STRING)\napp = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)\n        if (\n            event.event_type",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = Quart(__name__)\n@app.route(\"/api/incomingCall\", methods=[\"POST\"])\nasync def incoming_call_handler():\n    app.logger.info(\"incoming event data\")\n    for event_dict in await request.json:\n        event = EventGridEvent.from_dict(event_dict)\n        app.logger.info(\"incoming event data --> %s\", event.data)\n        if (\n            event.event_type\n            == SystemEventNames.EventGridSubscriptionValidationEventName",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "ToolResultDirection",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class ToolResultDirection(Enum):\n    TO_SERVER = 1\n    TO_CLIENT = 2\nclass ToolResult:\n    text: str\n    destination: ToolResultDirection\n    def __init__(self, text: str, destination: ToolResultDirection):\n        self.text = text\n        self.destination = destination\n    def to_text(self) -> str:",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "ToolResult",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class ToolResult:\n    text: str\n    destination: ToolResultDirection\n    def __init__(self, text: str, destination: ToolResultDirection):\n        self.text = text\n        self.destination = destination\n    def to_text(self) -> str:\n        if self.text is None:\n            return \"\"\n        return self.text if isinstance(self.text, str) else json.dumps(self.text)",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "RTToolCall",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class RTToolCall:\n    tool_call_id: str\n    previous_id: str\n    def __init__(self, tool_call_id: str, previous_id: str):\n        self.tool_call_id = tool_call_id\n        self.previous_id = previous_id\nclass Tool:\n    target: Callable[..., ToolResult]\n    schema: Any\n    def __init__(self, target: Any, schema: Any):",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "class Tool:\n    target: Callable[..., ToolResult]\n    schema: Any\n    def __init__(self, target: Any, schema: Any):\n        self.target = target\n        self.schema = schema\n_save_customer_issue_tool_schema = {\n    \"name\": \"save_customer_issue\",\n    \"type\": \"function\",\n    \"description\": \"Saves a customer issue to the database\",",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "kind": 2,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "def get_tools() -> dict[str, Tool]:\n    return {\n        # \"get_current_weather\": Tool(\n        #     schema=_weather_current_tool_schema,\n        #     target=lambda args: _weather_tool(\"current\", args),\n        # ),\n        # \"get_weather_forecast\": Tool(\n        #     schema=_weather_forecast_tool_schema,\n        #     target=lambda args: _weather_tool(\"hourly\", args),\n        # ),",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "_save_customer_issue_tool_schema",
        "kind": 5,
        "importPath": "backend.tools",
        "description": "backend.tools",
        "peekOfCode": "_save_customer_issue_tool_schema = {\n    \"name\": \"save_customer_issue\",\n    \"type\": \"function\",\n    \"description\": \"Saves a customer issue to the database\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"customer_name\": {\n                \"type\": \"string\",\n                \"description\": \"The name of the customer\",",
        "detail": "backend.tools",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]